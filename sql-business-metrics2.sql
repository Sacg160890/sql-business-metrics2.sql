COMMON METRICS
Daily Revenue
At the heart of every company is revenue, For our first KPI we'll calculate daily revenue.
------------------------------------------------------------------------------------------------------------------------------------------

select
  date(created_at),
  round(sum(price), 2)
from purchases
group by 1
order by 1;

-------------------------------------------------------------------------------------------------------------------------------------------
DAU is defined as the number of unique players seen in-game each day. It


-------------------------------------------------------------------------------------------------------------------------------------------
select
  date(created_at), 
  count(distinct user_id) as dau
from gameplays
group by 1
order by 1;
------------------------------------------------------------------------------------------------------------------------------------------
To get Daily ARPPU, modify the daily revenue query from earlier to divide by the number of purchasers.

------------------------------------------------------------------------------------------------------------------------------------------
select
date(created_at),
round(sum(price)/count(distinct user_id),2 )as arppu
from purchases
where refunded_at is null
group by 1
order by 1;
--------------------------------------------------------------------------------------------------------------------------------------------
One way to easily create and organize temporary results in a query is with CTEs, Common Table Expressions, also known as with clauses. 
The with clauses make it easy to define and use results in a more organized way than subqueries.
--------------------------------------------------------------------------------------------------------------------------------------------
with daily_revenue as (
  select
    date(created_at) as dt,
    round(sum(price), 2) as rev
  from purchases
  where refunded_at is null
  group by 1
)
select * from daily_revenue order by dt;
-----------------------------------------------------------------------------------------------------------------------------------------
You just built the first part of ARPU, daily_revenue. From here we can build the second half of ARPU in our with clause, daily_players, and use both together to create ARPU.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

with daily_revenue as (
  select
    date(created_at) as dt,
    round(sum(price), 2) as rev
  from purchases
  where refunded_at is null
  group by 1
), 
daily_players as (
  select
    date(created_at) as dt,
    count(distinct user_id) as players
  from gameplays
  group by 1
)
select
  daily_revenue.dt,
  (daily_revenue.rev / daily_players.players) as revenue
from daily_revenue
join daily_players using (dt);
---------------------------------------------------------------------------------------------------------------------------------------------------
the same case is applied withu the using command to see more clear the join clause
----------------------------------------------------------------------------------------------------------------------------------------
with daily_revenue as (
  select
    date(created_at) as dt,
    round(sum(price), 2) as rev
  from purchases
  where refunded_at is null
  group by 1
), 
daily_players as (
  select
    date(created_at) as dt,
    count(distinct user_id) as players
  from gameplays
  group by 1
)
select
  daily_revenue.dt,
  (daily_revenue.rev / daily_players.players) as Total revenue for all users
from daily_revenue
join daily_players on daily revenue 
where daily_players.dt = daily revenue.dt;
------------------------------------------------------------------------------------------------------------------------------------------------
To calculate retention, start from a query that selects the date(created_at) as dt and user_id columns from the gameplays table.
-----------------------------------------------------------------------------------------------------------------------------------------

select
date (g1.created_at) as dt,
g1.user_id
from gameplays as g1
join gameplays as g2
on  g1.user_id = g2.user_id
order by 1
limit 100;

------------------------------------------------------------------------------------------------------------------------------------------
1 Day Retention is defined as the number of players from Day N who came back to play again on Day N+1.
-------------------------------------------------------------------------------------------------------------------------------------------
select
  date(g1.created_at) as dt,
  g1.user_id,
  g2.user_id
from gameplays as g1
  join gameplays as g2 on
    g1.user_id = g2.user_id
    and date(g1.created_at) = date(datetime(g2.created_at, '-1 day'))
order by 1
limit 100;
--------------------------------------------------------------------------------------------------------------------------------------------
Cohort analysis for retation rates and overal curve.
------------------------------------------------------------------------------------------------------------------------------------------

SELECT Cohort_month,
       new_user1,
       retention_month,
       retained
FROM   (SELECT Cohort_month,
               new_user,
              ( Visit_pivot.visit_month - User_log.visit_month ) AS
              retention_month,
              Count(DISTINCT Visit_pivot.Customer_id) 
AS            
              retained,

   FROM (SELECT Customer_id,
           min(visit_month) AS Cohort_month
   FROM User_log)first_log, 
              LEFT JOIN User_log AS Visit_pivot
                 ON User_log.Customer_id = Visit_pivot.Customer_id
                     AND User_log.visit_month < Visit_pivot.visit_month
              LEFT JOIN new_user
                 ON new_user.Cohort_month = first_log.Cohort_month
GROUP BY 1,
         2)
-------------------------------------------------------------------------------------------------------------------------------------------------+
Cohort_Month  New_Users  Retention_month  Retained 
1              123                1        840
1              123                2        820
1              123                3        760
1
--------------------------------------------------+


**Conversionr rate curve**

SELECT Cohort_month,
       new_user1,
       retention_month,
       retention_percent
FROM   (SELECT Cohort_month,
               new_user,
              ( Visit_pivot.visit_month - User_log.visit_month ) AS
              retention_month,
              Count(DISTINCT Visit_pivot.Customer_id)/new_user1 
AS 
              retention_percent

  FROM (SELECT Customer_id,
           min(visit_month) AS Cohort_month
   FROM User_log)first_log, 
              LEFT JOIN User_log AS Visit_pivot
                 ON User_log.Customer_id = Visit_pivot.Customer_id
                     AND User_log.visit_month < Visit_pivot.visit_month
              LEFT JOIN new_user
                 ON new_user.Cohort_month = first_log.Cohort_month
GROUP BY 1,
         2)
------------------------------------------------------------------------------------------------------------------------------------------
Revenue per month.
----------------------------------------------------------------------------------------------------------------------------------------
alter session set current_schema = APPS ;
alter session set nls_language='AMERICAN';

and (b.segitem1,b.segitem1) in (('0302-4.0','0302-4.0'),
('0302-6.0','0302-6.0'),
('0303-10.0','0303-10.0'),
('0303-6.0','0303-6.0'),
('0304-4.0','0304-4.0'),
('0304-6.0','0304-6.0'),
('0305-6.0','0305-6.0'),
('0306-6.0','0306-6.0'),
('0307-10.0','0307-10.0'),
('0307-2.0','0307-2.0'),
('0307-6.0','0307-6.0'),
('0308-4.0','0308-4.0'),
('0308-6.0','0308-6.0'),
('0309-4.0','0309-4.0'),
('0309-6.0','0309-6.0'),
('0310-6.0','0310-6.0'),
('0311-6.0','0311-6.0'),
('0312-6.0','0312-6.0'),
('0312-7.0','0312-7.0'),
('0313-6.0','0313-6.0'),
('0314-2.0','0314-2.0'),
('0314-4.0','0314-4.0'),
('0322-2.0','0322-2.0'),
('0322-6.0','0322-6.0'),
('0330-6.0','0330-6.0'),
('0358-6.0','0358-6.0'),
('0360-6.0','0360-6.0'),
('0361-6.0','0361-6.0'),
('0362-6.0','0362-6.0'),
('0400-2.0','0400-2.0'),
('0400-4.0','0400-4.0'),
('0400-6.0','0400-6.0'),
('0400.41','0400.41'),
('0400.51','0400.51'),
('0400.61','0400.61'),
('0501-2.0','0501-2.0'),
('0501-4.0','0501-4.0'),
('0501-6.0','0501-6.0'),
('0502-6.0','0502-6.0'),
('0502-7.0','0502-7.0'),
('1000-2.0','1000-2.0'),
('1000-4.0','1000-4.0'),
('1000-6.0','1000-6.0'),
('1000-7.0','1000-7.0'),
('1001-4.0','1001-4.0'),
('1002-2.0','1002-2.0'),
('1002-4.0','1002-4.0'),
('1002-6.0','1002-6.0'),
('1002-7.0','1002-7.0'),
('1004-2.0','1004-2.0'),
('1004-4.0','1004-4.0'),
('1004-6.0','1004-6.0'),
('1004.61','1004.61'),
('2000-2.0','2000-2.0'),
('2000-4.0','2000-4.0'),
('2000-6.0','2000-6.0'),
('2000-7.0','2000-7.0'),
('2001-2.0','2001-2.0'),
('2001-4.0','2001-4.0'),
('2001-6.0','2001-6.0'),
('2001-7.0','2001-7.0'),
('2001.7','2001.7'),
('2002-2.0','2002-2.0'),
('2002-4.0','2002-4.0'),
('2002-6.0','2002-6.0'),
('2003-2.0','2003-2.0'),
('2003-4.0','2003-4.0'),
('2003-6.0','2003-6.0'),
('2005-6.0','2005-6.0'),
('2100-6.0','2100-6.0'),
('210460.5','210460.5'),
('210700.5','210700.5'),
('210800.5','210800.5'),
('215390.7','215390.7'),
('2200-2.0','2200-2.0'),
('2200-4.0','2200-4.0'),
('2200-6.0','2200-6.0'),
('230005.51','230005.51'),
('230006.61','230006.61'),
('230007.41','230007.41'),
('230008.51','230008.51'),
('2310-2.0','2310-2.0'),
('2310-4.0','2310-4.0'),
('2310-6.0','2310-6.0'),
('2350-6.0','2350-6.0'),
('2380-6.0','2380-6.0'),
('2400-2.0','2400-2.0'),
('2400-4.0','2400-4.0'),
('2400-6.0','2400-6.0'),
('2503-6.0','2503-6.0'),
('2505-6.0','2505-6.0'),
('2506-6.0','2506-6.0'),
('2513-6.0','2513-6.0'),
('2519-6.0','2519-6.0'),
('2700-2.0','2700-2.0'),
('2700-4.0','2700-4.0'),
('2700.61','2700.61'),
('2701-2.0','2701-2.0'),
('2701-4.0','2701-4.0'),
('2701-6.0','2701-6.0'),
('2720-2.0','2720-2.0'),
('2721-2.0','2721-2.0'),
('2722-2.0','2722-2.0'),
('2800-2.0','2800-2.0'),
('2800-4.0','2800-4.0'),
('2800-6.0','2800-6.0'),
('2805-4.0','2805-4.0'),
('2805-6.0','2805-6.0'),
('2820-6.0','2820-6.0'),
('2825-1.0','2825-1.0'),
('2825-10.0','2825-10.0'),
('2826-4.0','2826-4.0'),
('2900-2.0','2900-2.0'),
('2920-2.0','2920-2.0'),
('2930-4.0','2930-4.0'),
('2960-2.0','2960-2.0'),
('2960-4.0','2960-4.0'),
('301000.5','301000.5'),
('301000.6','301000.6'),
('301000.61','301000.61'),
('301020.5','301020.5'),
('301020.6','301020.6'),
('301020.61','301020.61'),
('301021.5','301021.5'),
('301021.6','301021.6'),
('301021.61','301021.61'),
('301030.5','301030.5'),
('301030.6','301030.6'),
('301030.61','301030.61'),
('301032.5','301032.5'),
('301033.5','301033.5'),
('301040.5','301040.5'),
('301040.6','301040.6'),
('301041.5','301041.5'),
('301041.6','301041.6'),
('301041.61','301041.61'),
('301042.5','301042.5'),
('301042.6','301042.6'),
('301042.61','301042.61'),
('301050.5','301050.5'),
('301060.5','301060.5'),
('301060.6','301060.6'),
('301060.61','301060.61'),
('301061.4','301061.4'),
('301061.41','301061.41'),
('301070.5','301070.5'),
('301080.5','301080.5'),
('301080.51','301080.51'),
('301100.5','301100.5'),
('301100.6','301100.6'),
('301100.61','301100.61'),
('301101.4','301101.4'),
('301101.41','301101.41'),
('301110.5','301110.5'),
('301111.5','301111.5'),
('301120.5','301120.5'),
('301120.6','301120.6'),
('301120.61','301120.61'),
('301121.5','301121.5'),
('301121.6','301121.6'),
('301121.61','301121.61'),
('301130.5','301130.5'),
('301130.6','301130.6'),
('301130.7','301130.7'),
('301130.71','301130.71'),
('301140.5','301140.5'),
('301150.5','301150.5'),
('301150.6','301150.6'),
('301150.61','301150.61'),
('301151.4','301151.4'),
('301151.41','301151.41'),
('301151.5','301151.5'),
('301151.51','301151.51'),
('301160.5','301160.5'),
('301170.5','301170.5'),
('301170.6','301170.6'),
('301170.61','301170.61'),
('301171.5','301171.5'),
('301180.5','301180.5'),
('301190.5','301190.5'),
('301190.6','301190.6'),
('301190.7','301190.7'),
('301190.71','301190.71'),
('301191.5','301191.5'),
('301191.6','301191.6'),
('301200.5','301200.5'),
('301200.6','301200.6'),
('301200.61','301200.61'),
('301201.5','301201.5'),
('301202.5','301202.5'),
('301203.5','301203.5'),
('301210.5','301210.5'),
('301212.5','301212.5'),
('301212.51','301212.51'),
('301220.5','301220.5'),
('301220.51','301220.51'),
('301230.4','301230.4'),
('301230.5','301230.5'),
('301230.6','301230.6'),
('301231.5','301231.5'),
('301231.6','301231.6'),
('301240.5','301240.5'),
('301240.51','301240.51'),
('301250.5','301250.5'),
('301251.5','301251.5'),
('301260.5','301260.5'),
('301270.5','301270.5'),
('301271.5','301271.5'),
('301280.5','301280.5'),
('301300.4','301300.4'),
('301300.41','301300.41'),
('301305.4','301305.4'),
('301305.41','301305.41'),
('301310.4','301310.4'),
('301310.41','301310.41'),
('301320.4','301320.4'),
('303030.51','303030.51'),
('303040.5','303040.5'),
('303040.51','303040.51'),
('303050.5','303050.5'),
('303050.51','303050.51'),
('303060.5','303060.5'),
('303060.51','303060.51'),
('303070.5','303070.5'),
('303070.51','303070.51'),
('303080.51','303080.51'),
('303080.61','303080.61'),
('303090.5','303090.5'),
('303090.51','303090.51'),
('303095.5','303095.5'),
('303095.51','303095.51'),
('303100.5','303100.5'),
('303100.51','303100.51'),
('303110.51','303110.51'),
('303120.51','303120.51'),
('303120.61','303120.61'),
('303130.5','303130.5'),
('303130.51','303130.51'),
('303150.5','303150.5'),
('303150.51','303150.51'),
('303190.5','303190.5'),
('303190.51','303190.51'),
('303200.61','303200.61'),
('303329.51','303329.51'),
('303330.51','303330.51'),
('304300.6','304300.6'),
('304300.61','304300.61'),
('304300.7','304300.7'),
('305020.85','305020.85'),
('305040.85','305040.85'),
('305060.85','305060.85'),
('305080.85','305080.85'),
('305090.85','305090.85'),
('305100.85','305100.85'),
('305110.85','305110.85'),
('305130.85','305130.85'),
('305140.85','305140.85'),
('305200.4','305200.4'),
('305200.41','305200.41'),
('305210.4','305210.4'),
('305210.41','305210.41'),
('305300.4','305300.4'),
('305300.41','305300.41'),
('305310.4','305310.4'),
('306010.4','306010.4'),
('306010.5','306010.5'),
('306010.6','306010.6'),
('306020.4','306020.4'),
('306020.5','306020.5'),
('306020.6','306020.6'),
('306040.4','306040.4'),
('306040.41','306040.41'),
('306040.5','306040.5'),
('306040.51','306040.51'),
('306040.6','306040.6'),
('306040.61','306040.61'),
('306050.4','306050.4'),
('306050.41','306050.41'),
('306050.5','306050.5'),
('306050.51','306050.51'),
('306050.6','306050.6'),
('306050.61','306050.61'),
('306070.4','306070.4'),
('306070.5','306070.5'),
('306070.6','306070.6'),
('306070.61','306070.61'),
('306081.41','306081.41'),
('306081.51','306081.51'),
('306081.61','306081.61'),
('306082.41','306082.41'),
('306082.51','306082.51'),
('306082.61','306082.61'),
('306083.41','306083.41'),
('306083.51','306083.51'),
('306083.61','306083.61'),
('306091.7','306091.7'),
('306100.4','306100.4'),
('306100.5','306100.5'),
('306100.6','306100.6'),
('306100.7','306100.7'),.......................................... X 1000
 the last record without comm
 ------------------------------------------------------------------------------------------------------------------------------------------
